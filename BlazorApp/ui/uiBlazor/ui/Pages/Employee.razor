@page "/Employee"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@inject Microsoft.Extensions.Configuration.IConfiguration config
@inject IJSRuntime JS


<button type="button" class="btn btn-primary m-2 float-end" data-bs-toggle="modal" data-bs-target="#exampleModal"
        @onclick="addClick">
    Add Employee
</button>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Employee Id</th>
            <th>Employee Name</th>
            <th>Departament</th>
            <th>Date of joinging</th>
            <th>Options</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var emp in employees)
        {
        <tr>
            <td>@emp.EmployeeId</td>
            <td>@emp.EmployeeName</td>
            <td>@emp.Departament</td>
            <td>@emp.DateOfJoinging</td>
            <td>
                <button type="button" class="btn btn-light mr-1"
                        data-bs-toggle="modal" data-bs-target="#exampleModal"
                        @onclick="(()=> editClick(emp))">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                        <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                        <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                    </svg>
                </button>
                <button type="button" class="btn btn-light mr-1"
                        data-bs-toggle="modal" data-bs-target="#exampleModal"
                        @onclick="(()=> deleteClick(emp.EmployeeId))">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                        <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                    </svg>
                </button>
            </td>
        </tr>
        }
    </tbody>
</table>

<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModal" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">@modalTitle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-lable="Close"></button>
            </div>

            <div class="modal-body">

                <div class="d-flex flex-row bd-highlight mb-3">

                    <div clas="p-2 w-50 bd-highlight">

                        <div class="input-group mb-3">
                            <span class="input-group-text">Departament Name</span>
                            <input type="text" class="form-control" @bind="EmployeeName" />
                        </div>

                        <div class="input-group mb-3">
                            <span class="input-group-text">Departament Name</span>
                            <select class="form-select" @bind="Departament">
                                @foreach (var emp in employees)
                                {
                                    <option>
                                        @emp.Departament
                                    </option>
                                }
                            </select>
                        </div>

                        <div class="input-group mb-3">
                            <span class="input-group-text">DOJ </span>
                            <input type="date" class="form-control" @bind="DateOfJoining" />
                        </div>

                    </div>
                </div>

                <div clas="p-2 w-50 bd-highlight">
                    <img width="250" height="250" src="@PhotoPath/@PhotoFileName"/>
                </div>

                @if (modalTitle == "Add employee")
                {
                    <button type="button" class="btn btn-primary" @onclick="createClick">
                        Create
                    </button>
                }
                else
                {
                    <button type="button" class="btn btn-primary" @onclick="updateClick">
                        Update
                    </button>
                }

            </div>

        </div>
    </div>
</div>


@code {

    //public class DepartamentClass
    //{
    //    public int DepartamentId { get; set; }
    //    public string DepartamentName { get; set; }
    //}

    public class EmployeeClass
    {
        public int EmployeeId { get; set; }
        public string EmployeeName { get; set; }
        public string Departament { get; set; }
        public string DateOfJoinging { get; set; }
        public string PhotoFileName { get; set; }
    }

    //private IEnumerable<DepartamentClass> departaments = Array.Empty<DepartamentClass>();
    private IEnumerable<EmployeeClass> employees = Array.Empty<EmployeeClass>();

    private string modalTitle;
    private int EmployeeId;
    private string EmployeeName;
    private string Departament;
    private DateTime DateOfJoining;
    private string PhotoFileName;
    private string PhotoPath;

    protected override async Task OnInitializedAsync()
    {
        PhotoPath = config["photo_url"];
        PhotoFileName = "pics.png";
        await refreshList();
    }

    private async Task refreshList()
    {
        //var request = new HttpRequestMessage(HttpMethod.Get,
        //    config["Api_Url"] + "Departament");

        //var client = ClientFactory.CreateClient();

        //var response = await client.SendAsync(request);

        //using var responseStream = await response.Content.ReadAsStreamAsync();

        //departaments = await JsonSerializer.DeserializeAsync<IEnumerable<DepartamentClass>>(responseStream);

        var request2 = new HttpRequestMessage(HttpMethod.Get,
            config["Api_Url"] + "Employee");

        var client2 = ClientFactory.CreateClient();

        var response2 = await client2.SendAsync(request2);

        using var responseStream2 = await response2.Content.ReadAsStreamAsync();

        employees = await JsonSerializer.DeserializeAsync<IEnumerable<EmployeeClass>>(responseStream2);

    }

    private async Task createClick()
    {
        var empObj = new EmployeeClass() {
            EmployeeName = EmployeeName,
            Departament = Departament,
            DateOfJoinging = DateOfJoining.ToString("yyyy-MM-dd"),
            PhotoFileName = PhotoFileName
        };

        var request = new HttpRequestMessage(HttpMethod.Post,
            config["Api_Url"] + "Employee");

        request.Content = new StringContent(JsonSerializer.Serialize(empObj), null, "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        using var responseStream = await response.Content.ReadAsStreamAsync();

        string resp = await JsonSerializer.DeserializeAsync<string>(responseStream);

        await JS.InvokeVoidAsync("alert", resp);

        await refreshList();

    }

    private async Task updateClick()
    {
        var empObj = new EmployeeClass()
        {
            EmployeeId= EmployeeId,
            EmployeeName = EmployeeName,
            Departament = Departament,
            DateOfJoinging = DateOfJoining.ToString("yyyy-MM-dd"),
            PhotoFileName = PhotoFileName
        };

        var request = new HttpRequestMessage(HttpMethod.Put,
        config["Api_Url"] + "Employee");

        request.Content = new StringContent(JsonSerializer.Serialize(empObj), null, "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        using var responseStream = await response.Content.ReadAsStreamAsync();

        string resp = await JsonSerializer.DeserializeAsync<string>(responseStream);

        await JS.InvokeVoidAsync("alert", resp);

        await refreshList();

    }

    private async Task deleteClick(int id)
    {
        if (!await JS.InvokeAsync<bool>("confirm", "seguro?"))
        {
            return;
        }

        var request = new HttpRequestMessage(HttpMethod.Delete,
            config["Api_Url"] + "Employee/" + id.ToString());

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        using var responseStream = await response.Content.ReadAsStreamAsync();

        string resp = await JsonSerializer.DeserializeAsync<string>(responseStream);

        await JS.InvokeVoidAsync("alert", resp);

        await refreshList();

    }

    private void addClick()
    {
        modalTitle = "Add employee";
        EmployeeId = 0;
        EmployeeName = "";
        Departament = "";
        DateOfJoining = DateTime.Now;
        PhotoFileName = "pics.png";
    }

    private void editClick(EmployeeClass emp)
    {
        modalTitle = "Edit employee";
        EmployeeId = emp.EmployeeId;
        EmployeeName = emp.EmployeeName;
        Departament = emp.Departament;
        DateOfJoining = Convert.ToDateTime(emp.DateOfJoinging);
        PhotoFileName = emp.PhotoFileName;
    }
}
